#!/usr/bin/env python

import os
import sys
import string
import datetime

import plasTeX
from plasTeX.TeX import TeX
from plasTeX.Logging import getLogger

import transforms

log = getLogger()

def main(argv):
	""" Main program routine """

	sourceFile = argv.pop(0)
	outFormat = 'xml'

	if argv:
		outFormat = argv.pop(0)

	# Create document instance that output will be put into
	document = plasTeX.TeXDocument()
	
	#setup config options we want
	document.config['files']['split-level']=1
	document.config['general']['theme']='AoPS'

	# Instantiate the TeX processor
	tex = TeX(document, file=sourceFile)

	# Populate variables for use later
	jobname = document.userdata['jobname'] = tex.jobname
	document.userdata['working-dir'] = os.getcwd()
	document.userdata['generated_time'] = str(datetime.datetime.now())
	document.userdata['transform_process'] = True;

	# Load aux files for cross-document references
#	pauxname = '%s.paux' % jobname

	# for dirname in [cwd] + config['general']['paux-dirs']:
	#	for fname in glob.glob(os.path.join(dirname, '*.paux')):
	#		if os.path.basename(fname) == pauxname:
	#			continue
	#		document.context.restore(fname, rname)

	# Parse the document
	tex.parse()
	
	# Set up TEXINPUTS to include the current directory for the renderer
	os.environ['TEXINPUTS'] = '%s%s%s%s' % (os.getcwd(), os.pathsep,
										 os.environ.get('TEXINPUTS',''), os.pathsep)
	# Change to specified directory to output to
	outdir = document.config['files']['directory']
	if outdir:
		outdir = string.Template(outdir).substitute({'jobname':jobname})
		if not os.path.isdir(outdir):
			os.makedirs(outdir)
		log.info('Directing output files to directory: %s.' % outdir)
		os.chdir(outdir)

	#Perform prerender transforms
	transforms.performTransforms( document )

	if outFormat == 'images' or outFormat == 'xhtml':
		db = generateImages(document)

	if outFormat == 'xhtml':
		render( document, 'XHTML', db )
		postRender(document)

	if outFormat == 'xml':
		toXml( document, jobname )

def nextID(self):
	ntiid = getattr(self, 'NTIID',-1)

	ntiid = ntiid + 1

	setattr(self, 'NTIID', ntiid)
	return 'tag:nextthought.com,2011-07-14:AOPS-HTML-%s-%s' % (self.userdata['jobname'], ntiid)

plasTeX.TeXDocument.nextNTIID=nextID

import indexer
import tociconsetter
import contentsizesetter
import relatedlinksetter
import contentthumbnails

from RenderedBook import RenderedBook

import contentchecks

def postRender(document, contentLocation='.', indexname = 'prealgebra'):
	print 'Performing post render steps'

	#This goes first b/c it sets the root node of the toc up
	print 'Adding icons to toc and pages'
	toc_file = os.path.join(contentLocation, 'eclipse-toc.xml')
	tociconsetter.transform(toc_file, contentLocation)

	print 'Fetching page info'
	book = RenderedBook(document, contentLocation)

	print 'Storing content height in pages'
	contentsizesetter.transform(book)

	print 'Adding related links to toc'
	relatedlinksetter.transform(book)

	print 'Generating thumbnails for pages'
	contentthumbnails.transform(book)

	print 'Running checks on content'
	contentchecks.performChecks(document, book)
	
	print "indexing content"
	contentPath = os.path.realpath(contentLocation)
	indexer.index_content(tocFile=toc_file, contentPath=contentPath, indexname=indexname)

from resources.ResourceRenderer import createResourceRenderer

def render(document, rname, db):
	# Apply renderer
	renderer = createResourceRenderer(rname, db)
	renderer.render(document)

def toXml( document, jobname ):
	outfile = '%s.xml' % jobname
	with open(outfile,'w') as f:
		f.write(document.toXML().encode('utf-8'))

from resources import ResourceDB

def generateImages(document):
	### Generates required images ###
	overrides = os.path.join(os.path.dirname(__file__), 'resourceoverrides')
	db = ResourceDB(document, overridesLocation=overrides)
	db.generateResourceSets()
	return db

if __name__ == '__main__':
	main(sys.argv[1:])
