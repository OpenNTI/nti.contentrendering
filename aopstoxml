#!/usr/bin/env python

import os, sys, codecs, string, glob
import plasTeX
from plasTeX.TeX import TeX

def main(argv):
	""" Main program routine """

	file = argv.pop(0)

	# Create document instance that output will be put into
	document = plasTeX.TeXDocument()

	# Instantiate the TeX processor
	tex = TeX(document, file=file)

	# Populate variables for use later
	jobname = document.userdata['jobname'] = tex.jobname
	cwd = document.userdata['working-dir'] = os.getcwd()

	# Load aux files for cross-document references
#	pauxname = '%s.paux' % jobname

	# for dirname in [cwd] + config['general']['paux-dirs']:
	# 	for fname in glob.glob(os.path.join(dirname, '*.paux')):
	# 		if os.path.basename(fname) == pauxname:
	# 			continue
	# 		document.context.restore(fname, rname)

	# Parse the document
	tex.parse()


	# Set up TEXINPUTS to include the current directory for the renderer
#	os.environ['TEXINPUTS'] = '%s%s%s%s' % (os.getcwd(), os.pathsep,
#										 os.environ.get('TEXINPUTS',''), os.pathsep)

	# # Change to specified directory to output to
	# outdir = config['files']['directory']
	# if outdir:
	# 	outdir = string.Template(outdir).substitute({'jobname':jobname})
	# 	if not os.path.isdir(outdir):
	# 		os.makedirs(outdir)
	# 	log.info('Directing output files to directory: %s.' % outdir)
	# 	os.chdir(outdir)

	transform( document )

	outfile = '%s.xml' % jobname
	with open(outfile,'w') as f: f.write(document.toXML().encode('utf-8'))

import string

def transform( document ):
	""" Applies DOM transformations to the document. """

	class _mathnode(plasTeX.Base.Command):

		def toXML(self):
			return "<%s expr='%s' />" % (self.nodeName, self.expr)

	class mathangle(_mathnode):
		nodeName = 'mathangle'

	class mathline(_mathnode):
		nodeName = 'mathline'

	class mathname(_mathnode):
		nodeName = 'mathname'

	document.context['mathangle'] = mathangle
	document.context['mathname'] = mathname
	document.context['mathline'] = mathline

	# Remove unneeded math elements ($24$) and add semantic
	# information where we can infer it from the text
	# ("angle $AB" => <mathangle 'AB'>)
	for math in document.getElementsByTagName( 'math' ):
		try:
			text = math.textContent
			if not(text):
				print 'Found empty math node'
			elif all( [c in string.ascii_letters for c in text] ):
				r = None
				if math.previousSibling:
					print math.previousSibling.textContent, '|'
				if math.previousSibling:
					prevText = (math.previousSibling.textContent or '').rstrip()
					if prevText.lower().endswith( ' angle' ):
						r = document.createElement( 'mathangle' )
					elif prevText.lower().endswith( ' line') or prevText == 'Line':
						r = document.createElement( 'mathline' )
				if r is None:
					r = document.createElement( 'mathname' )
				r.expr = text
				math.parentNode.replaceChild( r, math )
				print 'Replaced text %s' % text
			else:
				float(math.textContent)
				oldparent = math.parentNode
				math.parentNode.replaceChild( text, math )
				oldparent.normalize()
				print 'Replaced float %s' % text
		except UnicodeEncodeError, e:
			pass
		except ValueError, e:
			import traceback
			traceback.print_exc()
		except plasTeX.DOM.NotFoundErr, e:
			print 'Unable to replace ', math.textContent
			import traceback
			traceback.print_exc()



if __name__ == '__main__':
	main(sys.argv[1:])
