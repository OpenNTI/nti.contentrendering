#!/usr/bin/env python

import os, sys, codecs, string, glob
import plasTeX
from plasTeX.TeX import TeX
from plasTeX.Logging import getLogger
import pdb
from plasTeX.ConfigManager import *
import datetime
log = getLogger()
import transforms
from plasTeX.Base import Node


def main(argv):
	""" Main program routine """


	file = argv.pop(0)

	outFormat = 'xml'

	if argv:
		outFormat = argv.pop(0)


	# Create document instance that output will be put into
	document = plasTeX.TeXDocument()
	#setup config options we want
	document.config['files']['split-level']=1
	document.config['general']['theme']='AoPS'

	# Instantiate the TeX processor
	tex = TeX(document, file=file)

	# Populate variables for use later
	jobname = document.userdata['jobname'] = tex.jobname
	cwd = document.userdata['working-dir'] = os.getcwd()
	document.userdata['generated_time'] = str(datetime.datetime.now())



	# Load aux files for cross-document references
#	pauxname = '%s.paux' % jobname

	# for dirname in [cwd] + config['general']['paux-dirs']:
	#	for fname in glob.glob(os.path.join(dirname, '*.paux')):
	#		if os.path.basename(fname) == pauxname:
	#			continue
	#		document.context.restore(fname, rname)

	# Parse the document
	tex.parse()
	# Set up TEXINPUTS to include the current directory for the renderer
	os.environ['TEXINPUTS'] = '%s%s%s%s' % (os.getcwd(), os.pathsep,
										 os.environ.get('TEXINPUTS',''), os.pathsep)
	 # Change to specified directory to output to
	outdir = document.config['files']['directory']
	if outdir:
		outdir = string.Template(outdir).substitute({'jobname':jobname})
		if not os.path.isdir(outdir):
			os.makedirs(outdir)
		log.info('Directing output files to directory: %s.' % outdir)
		os.chdir(outdir)

	#Perform prerender transforms
	transforms.performTransforms( document )

	if outFormat == 'images' or outFormat == 'xhtml':
		db = generateImages(document)

	if outFormat == 'xhtml':
		render( document, 'XHTML', db )
		postRender(document)

	if outFormat == 'xml':
		toXml( document, jobname )

def nextID(self):
	ntiid = getattr(self, 'NTIID',-1)

	ntiid = ntiid + 1

	setattr(self, 'NTIID', ntiid)

	return 'aops-%s-%s' % (self.userdata['jobname'], ntiid)

plasTeX.TeXDocument.nextNTIID=nextID

import tociconsetter
import contentsizesetter
import outgoinglinkssetter
from RenderedBook import RenderedBook

def postRender(document, contentLocation='.'):
	print 'Performing post render steps'

	#This goes first b/c it sets the root node of the toc up
	print 'Adding icons to toc and pages'
	tociconsetter.transform(os.path.join(contentLocation, 'eclipse-toc.xml'), contentLocation)

	print 'Fetching page info'
	book = RenderedBook(contentLocation)

	print 'Storing content height in pages'
	contentsizesetter.transform(book)

	print 'Adding outoing links to toc'
	outgoinglinkssetter.transform(book)

	print 'Checking for excessively wide pages'
	badPages = 0

	maxWidth = 730

	for pageName in book.getPageNames():
		page = book.getPage(pageName)
		width = page.pageInfo['scrollWidth']

		if width > maxWidth:
			badPages += 1
			print '*** WARNING *** Width of %s is outside of bounds.  Maximum width should be %s but it was %s ' % (pageName, maxWidth, width)

	if badPages == 0:
		print 'All page sizes within acceptable range'


from resources.ResourceRenderer import createResourceRenderer

def render(document, rname, db):
	# Apply renderer
	renderer = createResourceRenderer(rname, db)
	renderer.render(document)

def toXml( document, jobname ):
	outfile = '%s.xml' % jobname
	with open(outfile,'w') as f:
		f.write(document.toXML().encode('utf-8'))

import string


from resources import ResourceDB

def generateImages(document):
	### Generates required images ###

	db = ResourceDB(document)
	db.generateResourceSets()

	return db;


if __name__ == '__main__':
	main(sys.argv[1:])
